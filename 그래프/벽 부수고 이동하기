package 신규아이디추천;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
class Pair {
	int x, y, z;

	Pair(int x, int y, int z) {
		this.x = x;
		this.y = y;
		this.z = z;
	}
}

public class Main {
	static int[][] graph;
	public static final int[] dx = { 1, -1, 0, 0 };
	public static final int[] dy = { 0, 0, 1, -1 };


	static int N, M;

	public static void main(String[] args) throws NumberFormatException, IOException {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer tokenizer = new StringTokenizer(reader.readLine());
		N = Integer.parseInt(tokenizer.nextToken());
		M = Integer.parseInt(tokenizer.nextToken());
		int[][][] d = new int[N][M][2];
		graph = new int[N][M];
		for (int i = 0; i < N; i++) {
			String s = reader.readLine();
			for (int j = 0; j < M; j++)
				graph[i][j] = s.charAt(j) - '0';
		}
		d[0][0][0] = 1;
		Queue<Pair> q = new LinkedList<Pair>();
		q.add(new Pair(0, 0, 0));
		while (!q.isEmpty()) {
			Pair p = q.remove();
			int x = p.x;
			int y = p.y;
			int z = p.z;
			for (int k = 0; k < 4; k++) {
				int nx = x + dx[k];
				int ny = y + dy[k];
				if (nx < 0 || nx >= N || ny < 0 || ny >= M)
					continue;
				//상하좌우가 빈칸이고 && 상하좌우에 방문을 안한경우
				 if (graph[nx][ny] == 0 && d[nx][ny][z] == 0) {
	                    d[nx][ny][z] = d[x][y][z] + 1;
	                    q.offer(new Pair(nx, ny, z));
	                }
				 //벽을 한번도 안부슨 상황이고 상하좌우 벽이 있고 방문을 안한 경우
				 if (z == 0 && graph[nx][ny] == 1 && d[nx][ny][z+1] == 0) {
	                    d[nx][ny][z+1] = d[x][y][z] + 1; //벽을 부슨다. z+1
	                    q.offer(new Pair(nx, ny, z+1));
	                }
			}
		}
		 if (d[N-1][M-1][0] != 0 && d[N-1][M-1][1] != 0) {
	            System.out.println(Math.min(d[N-1][M-1][0], d[N-1][M-1][1]));
	        } else if (d[N-1][M-1][0] != 0) {
	            System.out.println(d[N-1][M-1][0]);
	        } else if (d[N-1][M-1][1] != 0) {
	            System.out.println(d[N-1][M-1][1]);
	        } else {
	            System.out.println(-1);
	        }

	}
}
